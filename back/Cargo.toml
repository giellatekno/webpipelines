[package]
name = "webpipeline"
version = "0.1.0"
edition = "2021"
authors = [
    "Anders Lorentsen <anders.lorentsen@uit.no>"
]

[build]
target = "target"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[dependencies]
# TODO this should be out, but ideally libhfst itself should also be updated
# to support it
#hfst-rs = { path = "/home/anders/projects/cpp_library_to_rust_demo/hfst-rs/" }

# the web framework (built on top of tower, uses 
axum = { version = "0.7.5", features = ["multipart", "macros"] }

# base64.. does it need explaining?
base64 = "0.21.4"

# function memoization. provides a #[cached] macro that you just slap on a function
cached = { version = "0.46.0", features = ["async"] }

#cmd_lib = "1.3.0"
cmd_lib = { path = "../../rust_cmd_lib" }

# A tracing-subscriber Layer that can talk with tokio-console...
console-subscriber = "0.2"

# for parsing .docx Word files
docx-rs = "0.4.7"

# loads environment variables from a .env file
dotenv = "0.15.0"

# For gzip/gunzip
flate2 = "1.0.27"

# standard http definitions
http = "1.1"

# http server, works with tokio (and hence axum, etc)
hyper = { version = "0.14", features = ["full"] }

# more itertools! can .join("\n") an iterator directly, for example!
itertools = "0.11"

# on startup, try to inherit which port to listen to - very nice while developing
listenfd = "1.0.1"

# \r\n <-> \n utility
newline-converter = "0.3"

# file watcher
# CC Zero 1.0
# default-features = false turns off crossbeam-channel, which "could be
# problematic when using tokio"
notify = { version = "6.1.1", default-features = false }

# wrapper for ease of use on top of notify
# MIT OR Apache 2.0
notify-debouncer-full = { version = "0.3.1", default-features = false }

# to be able to issue KILL signal to processes
nix = { version = "0.27.1", features = ["signal"] }

# for "lazy initialized global, static data"
once_cell = "1.18.0"

# SERialization / DEserialization, for reading request bodies, and writing responses in JSON
serde = { version = "1.0", features = ["derive"] }

serde_json = "1.0.107"
serde_yaml = "0.9.27"

# Make a temporary file for me
tempfile = "3.8.0"

# The async runtime
tokio = { version = "1.38", features = ["full", "tracing"] }

# Async services
tower = { version = "0.4.13", features = ["limit", "load-shed", "timeout", "buffer", "util"] }

# http services that works with tower
tower-http = { version = "0.5.2", features = ["cors", "fs", "trace", "catch-panic"] }

# a logging framework which works great in async settings
tracing = "0.1"

# logging, this can listen to log events and do something with them
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# for panic handler in axum (via tower-http)
http-body-util = "0.1.2"

# Provides abstractions for working with bytes.
# used by the panic handler
# MIT
bytes = "1.6.0"

#validator = { version = "0.16.1", features = ["derive"] }
